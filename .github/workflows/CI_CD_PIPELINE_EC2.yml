name: CI/CD Pipeline with EC2 Deployment

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Check checkout files
      - name: List files for debugging
        run: ls -a

      - name: pwd
        run: pwd

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fastapi_server:latest

      # Create SSH private key
      - name: Create SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      # Create app directory on EC2
      - name: Create app directory on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_IP }} "mkdir -p ~/app"
      # Upload mediapipe_service.py
      - name: Upload mediapipe_service.py
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./app/services/mediapipe_service.py ec2-user@${{ secrets.EC2_IP }}:~/app/services/mediapipe_service.py
      # Upload celery_app.py
      - name: Upload celery_app.py
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./app/celery_app.py ec2-user@${{ secrets.EC2_IP }}:~/app/celery_app.py
      # Upload docker-compose.yml
      - name: Upload docker-compose-prod.yml
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose-prod.yml ec2-user@${{ secrets.EC2_IP }}:~/docker-compose.yml
      # Upload requirements.txt
      - name: Upload requirements.txt
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa requirements.txt ec2-user@${{ secrets.EC2_IP }}:~/requirements.txt
      # Upload .env file content from secrets
      - name: Upload .env file
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          echo "${{ secrets.ENV_FILE }}" > ~/.env
          EOF
      # Disk cleanup on EC2 (new logic)
      - name: Clean up disk space on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          echo "Cleaning disk space..."
          sudo rm -rf /var/log/*.gz /var/log/*.1
          sudo apt-get clean
          echo "Disk cleanup completed."
          EOF
      # Deploy to EC2
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          # Docker login
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          if [ $(df --output=pcent / | tail -n 1 | tr -d '%') -ge 80 ]; then
          docker system prune -af
          fi
          # Pull the latest image and restart services
          # docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi_server:latest
          docker-compose down
          docker-compose up -d
          EOF
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        shell: bash
