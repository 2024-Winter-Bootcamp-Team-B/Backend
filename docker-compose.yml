version: "3.8"

services:
  # FastAPI 서버
  fastapi:
    image: python:3.10-slim
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./wait-for-it.sh:/wait-for-it.sh
    working_dir: /app
    command: >
      sh -c "./wait-for-it.sh mysql:3306 -- 
             apt-get update && 
             apt-get install -y libgl1 libglib2.0-0 libmariadb-dev gcc pkg-config && 
             pip install --no-cache-dir -r requirements.txt && 
             uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
#    environment:
#      - BROKER_URL=amqp://guest:guest@rabbitmq//
#      - DATABASE_URL=mysql+pymysql://techeer:techeer20250201@mysql:3306/focus_db
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - mysql

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP 포트
      - "15672:15672"  # RabbitMQ 관리 콘솔 포트
      - "15692:15692" #metrics 포트

  # MySQL DB
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    # environment:
    #   MYSQL_ROOT_PASSWORD: root_password
    #   MYSQL_DATABASE: focus_db
    #   MYSQL_USER: techeer
    #   MYSQL_PASSWORD: techeer20250201
    env_file:
      - .env

  # Celery 워커
  celery:
    image: python:3.10-slim
    container_name: celery_worker
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "apt-get update &&
             apt-get install -y libgl1 libglib2.0-0 libmariadb-dev gcc pkg-config &&
             pip install --no-cache-dir -r requirements.txt &&
             celery -A app.celery_app worker --loglevel=info"
    #    environment:
#      - BROKER_URL=amqp://guest:guest@rabbitmq//
#      - RESULT_BACKEND=db+mysql://celery_user:celery_password@mysql/celery_db
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env

    depends_on:
      - rabbitmq
      - mysql

############################################

  cadvisor: #서비스 이름
    image: gcr.io/cadvisor/cadvisor:latest # 이미지 이름
    container_name: cadvisor # 컨테이너 이름
    ports:
      - "8080:8080" # 포트 8080매핑
    volumes:
      - /:/rootfs:ro  # 읽기 전용 데이터 - 루트파일 시스템
      - /var/run:/var/run:ro  # 읽기&쓰기 - 런타임데이터
      - /sys:/sys:ro  # 읽기 전용 데이터 - 커널, 하드웨어, 드라이버 정보 등등
      - /var/lib/docker/:/var/lib/docker:ro # 읽기 전용 데이터, 도커 정보 데이터
    depends_on:
      - prometheus
      
  prometheus: # 서비스이름
    image: prom/prometheus:latest # 이미지 이름
    container_name: prometheus # 컨테이너 이름
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # 로컬에 존재하는 prometheus.yml을 컨테이너에 추가를 위한것
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml # 로컬에 존재하는 alert-rules.yml을 컨테이너에 추가를 위한것
    command:
      - '--config.file=/etc/prometheus/prometheus.yml' # 프로메테우스를 실행할떄 prometheus.yml에 있는데로 실행해 달라는것
    ports:
      - "9090:9090" # 포트 9090매핑
      
  grafana: # 서비스 이름
    image: grafana/grafana:latest # 이미지 이름
    container_name: grafana # 컨테이너 이름
    volumes: # 이제 데이터를 저장을 해 주어야 하는데 
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/ # grafana를 하면 datasource 대이터 소스들을 저장하고 도커랑 공유한다는것이다.
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/ # 이것도 대시보드를 도커랑 공유한다는것이다.
    ports:
      - "3000:3000" # 포트 3000매핑
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=g_Rhj69M97ev33x
    depends_on:
      - prometheus

  nginx: # 실제 요청을 처리하고 웹 서버의 역할을 담당하며, nginx-exporter의 데이터를 제공
    image: nginx:stable
    container_name: nginx
    ports:
      - "80:80"
    #  - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
    #  - ./certbot/www:/var/www/certbot

  nginx-exporter: # 모니터링을 위한 보조 컨테이너로, Prometheus와 연동하여 NGINX의 메트릭 데이터를 수집.
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    command: --nginx.scrape-uri=http://nginx:80/stub_status
    depends_on:
      - nginx


