version: "3.8"

services:
  # FastAPI 서버
  fastapi:
    build:
      context: .  # Dockerfile의 위치를 지정
      dockerfile: Dockerfile
    container_name: fastapi_server
    volumes:
      - .:/app
      - ./uploaded_images:/app/uploaded_images  # 로컬 루트 디렉토리의 uploaded_images와 컨테이너 내부 경로를 매핑
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # 로컬 환경에서만 --reload를 사용하도록 함
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - mysql

#    environment:
#      - BROKER_URL=amqp://guest:guest@rabbitmq//
#      - DATABASE_URL=mysql+pymysql://techeer:techeer20250201@mysql:3306/focus_db


  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP 포트
      - "15672:15672"  # RabbitMQ 관리 콘솔 포트

  # MySQL DB
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    # environment:
    #   MYSQL_ROOT_PASSWORD: root_password
    #   MYSQL_DATABASE: focus_db
    #   MYSQL_USER: techeer
    #   MYSQL_PASSWORD: techeer20250201
    env_file:
      - .env

  # Celery 워커
  celery:
    image: python:3.10-slim
    container_name: celery_worker
    volumes:
      - .:/app
      - ./uploaded_images:/app/uploaded_images  # 로컬 루트 디렉토리의 uploaded_images와 컨테이너 내부 경로를 매핑

    working_dir: /app
    command: >
      sh -c "apt-get update &&
             apt-get install -y libgl1 libglib2.0-0 libmariadb-dev gcc pkg-config &&
             pip install --no-cache-dir -r requirements.txt &&
             celery -A app.celery_app worker --loglevel=info"
    #    environment:
#      - BROKER_URL=amqp://guest:guest@rabbitmq//
#      - RESULT_BACKEND=db+mysql://celery_user:celery_password@mysql/celery_db
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env

    depends_on:
      - rabbitmq
      - mysql
      - fastapi
      
  tests:
    build:
      context: .
    depends_on:
      - fastapi
    command: pytest -s tests
    environment:
      TESTING: "TRUE"
